#!/bin/sh

#START=99

CONFIG=/bin/config
AWS_DISABLED=$($CONFIG get noaws)

factory_mode_flag=`/bin/config get factory_mode`
if [ "x$factory_mode_flag" = "x1" ]; then
	exit 0
fi

rae_partion=$(part_dev rae)
panic_partion=$(part_dev crashinfo)
RAE_DIR=/tmp/router-analytics
RAE_DATA=$RAE_DIR/ra_data
CONFIG=/bin/config

if [ "x$($CONFIG get RA_stage)" = "x" ];then
	$CONFIG set aws_stage=prod
else
	$CONFIG set aws_stage=$($CONFIG get RA_stage)
fi
	
partition_init()
{
	if [ "$(cat /tmp/orbi_type)" = "Base" ]; then
		if [ "x$(/bin/config get force_clean_ranvram_flag)" != "x1" ]; then
			/bin/config unset RA_stage
			/bin/config set force_clean_ranvram_flag=1
			/bin/config commit
		fi
		if [ "x$(/bin/config get RA_stage)" = "x" ];then
			/bin/config set RA_stage=prod
			/bin/config commit
		fi
	fi

	if [ "$(/bin/config get dgc_flash_type)" != "EMMC" -a "x$(ubinfo -a |grep vol_ntgrdata)" = "x" ];then
		ubinfo -a | grep vol_rae  || {
			# make a new volume on ubi0 by default. Any better idea to remove the hardcode "/dev/ubi0"?
			ubimkvol /dev/ubi0 -N vol_rae -s 2MiB
		}
	fi

	[ ! -d $RAE_DIR ] && mkdir -p $RAE_DIR
	if [ "x$(ubinfo -a |grep vol_ntgr)" != "x" ]; then
		mkdir -p /tmp/ntgr/ra_data
		ln -s /tmp/ntgr/ra_data $RAE_DATA
	else
		ra_data_partion=$(part_dev ra_data)
		[ ! -d $RAE_DATA ] && mkdir -p $RAE_DATA
		[ "x$ra_data_partion" != "x" ] && filetype=`blkid $ra_data_partion |grep -o 'TYPE=.*' |awk -F \" '{print $2}'`
		if [ "x$filetype" != "xext4" ];then
			mkfs.ext4 $ra_data_partion
		fi
		mount $ra_data_partion $RAE_DATA
	fi
	[ ! -d $RAE_DATA/installation ] && mkdir -p $RAE_DATA/installation
	#only run on base, MR2.x  use /tmp/orbi_type judge the orbi TYPE
}

start() {
#	if [ "$(cat /tmp/orbi_type)" = "Base" ]; then
		killall -9  aws-iot
		rm /var/run/aws_iot.pid
		/usr/sbin/aws-iot
#	fi
}

stop() 
{
	killall -9 aws-iot
	rm /var/run/aws_iot.pid
}

restart()
{
	stop
	start
}

update()
{
	cd $RAE_DIR
	FILES="policy_version rae_version RAE_Policy.json /usr/sbin/aws-iot /usr/sbin/data_collector /usr/sbin/subscribe_publish_sample"
	tar -zcf rae.tar.gz $FILES
	if [ "x$(ubinfo -a |grep vol_ntgrdata)" != "x" ]; then
		cp -rf rae.tar.gz /tmp/ntgrdata/rae
		rm rae.tar.gz
	else
		dd if=/dev/zero bs=1024k count=1 |tr "\000" "\377" >1024kdata
		dd if=rae.tar.gz of=1024kdata conv=notrunc
		flash_erase $rae_partion 0 0
		cat 1024kdata > $rae_partion
		rm rae.tar.gz
		rm 1024kdata
	fi
	echo 1 >$RAE_DIR/status
}

check()
{
	echo 0 >$RAE_DIR/status
	if [ "x$(ubinfo -a |grep vol_ntgrdata)" != "x" ]; then
		cp -rf /tmp/ntgrdata/rae/rae.tar.gz /tmp
	else
		dd if=$rae_partion of=/tmp/rae.tar.gz
	fi
	tar -zxf /tmp/rae.tar.gz -C $RAE_DIR/
	tar_status=$?
	if [ -s $RAE_DIR/rae_version -a -s $RAE_DIR/policy_version -a -s $RAE_DIR/usr/sbin/aws-iot -a -s $RAE_DIR/usr/sbin/data_collector -a -s $RAE_DIR/usr/sbin/subscribe_publish_sample -a -s $RAE_DIR/RAE_Policy.json ];then
		mv $RAE_DIR/usr/sbin/* /usr/sbin/
		echo 1 >$RAE_DIR/status
		rm /tmp/rae.tar.gz -rf
		rm $RAE_DIR/usr -rf
	fi
}

boot()
{
#	echo 1 > /tmp/debug_first_report_flag
#	if FW support router analytics installation , should create this filetype
	partition_init
	if [ "$(cat /tmp/orbi_type)" != "Satellite" ]; then
		echo 1 > /tmp/support_ra_installation
		/usr/sbin/install_agent
		/sbin/install_ping &
		hijack_status=`$CONFIG get dns_hijack`
	    install_state=`$CONFIG get installState`
		if [ "$hijack_status" = "1" ];then
			/usr/sbin/ra_installevent  sysReboot
		fi
		if [ "$install_state" = "13" ];then
			/usr/sbin/ra_installevent  fwupdatingsucess
		fi
	fi

	#if DUT not get ntp time, use firmware release time
	if [ "x$(date | grep 1970)" != "x" ]; then
		local date=`cat /firmware_time`
		local mon=`echo $date |awk '{print $2}'`
		local day=`echo $date |awk '{print $3}'`
		[ "$(echo $mon |wc -L)" = "1" ] && mon="0$mon"
		[ "$(echo $day |wc -L)" = "1" ] && day="0$day"
		local time=`echo $date |awk '{print $4}'`
		local hour=`echo $time |awk  -F ':' '{print $1}'`
		local min=`echo $time |awk -F ':' '{print $2}'`
		local year=`echo $date |awk '{print $6}'`
		case "$mon" in
			Jan) mon="01";;
			Feb) mon="02";;
			Mar) mon="03";;
			Apr) mon="04";;
			May) mon="05";;
			Jun) mon="06";;
			Jul) mon="07";;
			Aug) mon="08";;
			Sep) mon="09";;
			Oct) mon="10";;
			Nov) mon="11";;
			Dec) mon="12";;
		esac
		date $mon$day$hour$min$year
	fi
	if [ -f /tmp/orbi_type ]; then
		if [ "$(cat /tmp/orbi_type)" == "Satellite" ]; then
#			check
#			if [ "x$factory_mode_flag" != "x1" ]; then
#				if [ "$(cat $RAE_DIR/status)" = "1" ]; then
#					start
#					check_ra_dbg
#				else
#					/usr/sbin/ra_check
#				fi
#			fi
			exit 1
		fi
	fi
	if [ "$(/bin/config get dgc_flash_type)" != "EMMC" ];then
		dd if=$panic_partion of=/tmp/panic_log.txt bs=131072 count=4
		dd if=$panic_partion of=/tmp/crash_log bs=131072 skip=1 count=3
	else
		dd if=$panic_partion of=/tmp/panic_log.txt bs=16318 count=16
		dd if=$panic_partion of=/tmp/crash_log bs=16318 skip=1 count=15
	fi
	local crash_newline=`cat /tmp/crash_log | wc -l`
	local crash_oldline=`/bin/config get crash_line`
	if [ "$crash_newline" != "$crash_oldline" ] && [ "x$crash_oldline" != "x" ]; then
		/bin/config set lastRebootReason=1
		local UTC_time=`date +%s`
		/bin/config set time_crash=$UTC_time
	if [ "$(/bin/config get dgc_flash_type)" != "EMMC" ];then
			local get_line=$crash_newline
	else
		if [ $crash_newline -gt $crash_oldline ];then
			local get_line=$(($crash_newline-$crash_oldline+1))
		else
			local get_line=$(($crash_newline+1))
		fi
	fi
		tail -n$get_line < /tmp/crash_log |grep " "> /tmp/crash_aws_log
		/bin/config set crash_line=$crash_newline
		/bin/config set eventtype=0
	fi
	if [ "x$crash_oldline" == "x" ]; then
		/bin/config set crash_line=$crash_newline
	fi
	
	[ "x$(/bin/config get lastRebootReason)" = "x" ] && /bin/config set lastRebootReason=0
	dd if=$panic_partion of=/tmp/reboot_reason bs=16318 count=1
	reboot_reason=`echo "obase=10;ibase=16;$(cat /proc/reboot_reason|awk -F 'x' '{print $2}')"|bc`
	oom="0"
	oops="0"
	panic="0"
	watchdog="0"
	if [ "$(($(($reboot_reason >> 2))%2))" != "0" ];then
		#oom
		oom="1"
		/bin/config set lastRebootReason=1
	fi
	if [ "$(($(($reboot_reason >> 3))%2))" != "0" ];then
		#oops
		oops="1"
		/bin/config set lastRebootReason=1
	fi
	if [ "$(($(($reboot_reason >>  4))%2))" != "0" ];then
		#panic 
		panic="1"
		/bin/config set lastRebootReason=1
	fi
	if [ "$(($(($reboot_reason >> 5))%2))" != "0" ];then
		#watchdog reboot
		watchdog="1"
		/bin/config set lastRebootReason=1
	fi
	if [ "$(($(($reboot_reason >> 6))%2))" != "0" ];then
		#reset button reboot
		/bin/config set lastRebootReason=2
	fi
	if [ "$(($(($reboot_reason >> 7))%2))" != "0" ];then
		#reset button default
		/bin/config set lastRebootReason=3
	fi
	if [ "$(($(($reboot_reason))%2))" != "0" -o "$reboot_reason" == "0" ];then
		#unknown reboot
		[ "x$(/bin/config get lastRebootReason)" = "x" ] && /bin/config set lastRebootReason=0
	fi
	if [ "x$(/bin/config get lastRebootReason)" = "x1" ];then
		[ -f /tmp/crash_aws_log ] || echo -n " "> /tmp/crash_aws_log
		if [ "$oom" = "1" ];then
			sed -i '1s/^/===Kernel oom===/' /tmp/crash_aws_log
		elif [ "$oops" = "1" ];then
			sed -i '1s/^/===Kernel oops===/' /tmp/crash_aws_log
		elif [ "$watchdog" = "1" ];then 
			sed -i '1s/^/===Kernel watchdog===/' /tmp/crash_aws_log
		else
			sed -i '1s/^/===Kernel panic===/' /tmp/crash_aws_log
		fi
	fi

	check
	 /bin/config set cpu_flag=1
	 /bin/config set memory_flag=1
	 /bin/config set eventtype=0
	 /bin/config commit
	if [ "$(cat /tmp/orbi_type)" = "Base" ]; then
		/sbin/ping-gateway &
		if [ "x$factory_mode_flag" != "x1" ]; then
			if [ "$(cat $RAE_DIR/status)" = "1" ]; then
				start
			else
				/usr/sbin/ra_check
				/usr/sbin/ra_daemon_monitor.sh &
			fi
		fi
	fi
}

cpu_test()
{
	for in in `seq $1`
	do 
		echo -ne "i=0;
		while true
		do 
			i=i+1;
		done" | /bin/sh &
		
	done
}

memory_test()
{
	if [ "$1" = 1 ]; then
		mkdir /tmp/memory
		mount -t tmpfs -o size=280M tmpfs /tmp/memory
		dd if=/dev/zero of=/tmp/memory/block
	else
		rm /tmp/memory/block
		umount /tmp/memory
		rmdir /tmp/memory
	fi
}

install_count_reset()
{
	echo 0 >$RAE_DATA/installation_count
}

install_count_add()
{
	[ ! -f $RAE_DATA/installation_count ] && echo 0 >$RAE_DATA/installation_count
	count=`cat $RAE_DATA/installation_count`
	if [ $count -lt 32 ];then
		count=$(($count+1))
		echo $count > $RAE_DATA/installation_count
	fi
	rm $RAE_DATA/duration
	rm $RAE_DATA/installation -rf
}

# Check if AWS is disabled
if [ "$AWS_DISABLED" = "1" ]; then
	exit 0
fi

# Process arguments
case "$1" in 
	"boot")
		boot
	;;
	"start")
		start
	;;
	"stop")
		stop
	;;
	"restart")
		restart
	;;
	"update")
		update
	;;
	"check")
		check
	;;
	"cpu")
		cpu_test  $2
	;;
	"memory")
		memory_test $2
	;;
	"reset")
		install_count_reset  ##only run when pot clean or ST SQA do test
	;;
	"default")      # run when default reset
		install_count_add
		/usr/sbin/ra_session_id 
	;;
	*)
		echo "Unknow command" > /dev/console
		echo "Usage: $0 boot|start|stop|restart|update|reset|default" > /dev/console
	;;
esac
